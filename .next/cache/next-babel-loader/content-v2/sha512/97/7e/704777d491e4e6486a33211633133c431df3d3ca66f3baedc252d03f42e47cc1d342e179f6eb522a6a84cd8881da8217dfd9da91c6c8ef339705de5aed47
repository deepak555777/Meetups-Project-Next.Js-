{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\deepa\\\\Documents\\\\Udemy Learning\\\\Next.Js Project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetails';\n\nfunction meetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: props.meetupData.title,\n    url: props.meetupData.image,\n    address: props.meetup.address,\n    description: props.meetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://deepak07:%40P3Gh%40W9bQYY5m4@cluster0.u6scy9x.mongodb.net/test');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: 'blocking',\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://deepak07:%40P3Gh%40W9bQYY5m4@cluster0.u6scy9x.mongodb.net/test');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default meetupDetails;","map":{"version":3,"sources":["C:/Users/deepa/Documents/Udemy Learning/Next.Js Project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","meetupDetails","props","meetupData","title","image","meetup","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,wCAAzB;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAC7B,sBACI,QAAC,YAAD;AACA,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADxB;AAEA,IAAA,GAAG,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFtB;AAGA,IAAA,OAAO,EAAEH,KAAK,CAACI,MAAN,CAAaC,OAHtB;AAIA,IAAA,WAAW,EAAEL,KAAK,CAACI,MAAN,CAAaE;AAJ1B;AAAA;AAAA;AAAA;AAAA,UADJ;AAQC;;AAED,OAAO,eAAeC,cAAf,GAA+B;AAClC,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CACjB,8EADiB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA3B,EAAoCC,OAApC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,UADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAahB,MAAD,KAAW;AAC3BiB,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAElB,MAAM,CAACW,GAAP,CAAWQ,QAAX;AAAX;AADmB,KAAX,CAAZ;AAFJ,GAAP;AAMH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AACzC,QAAMH,QAAQ,GAAEG,OAAO,CAACJ,MAAR,CAAeC,QAA/B;AACA,QAAMd,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CACjB,8EADiB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMc,cAAc,GAAG,MAAMf,iBAAiB,CAACgB,OAAlB,CAA0B;AACnDZ,IAAAA,GAAG,EAAElB,QAAQ,CAACyB,QAAD;AADsC,GAA1B,CAA7B;AAKJd,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAM;AACFjB,IAAAA,KAAK,EAAC;AACFC,MAAAA,UAAU,EAAC;AACP2B,QAAAA,EAAE,EAAEF,cAAc,CAACX,GAAf,CAAmBQ,QAAnB,EADG;AAEPrB,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAFf;AAGPG,QAAAA,OAAO,EAAEqB,cAAc,CAACrB,OAHjB;AAIPF,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAJf;AAKPG,QAAAA,WAAW,EAAEoB,cAAc,CAACpB;AALrB;AADT;AADJ,GAAN;AAWC;AAED,eAAeP,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\nimport MeetupDetail from '../../components/meetups/MeetupDetails'\r\n\r\n\r\nfunction meetupDetails(props){\r\nreturn(\r\n    <MeetupDetail  \r\n    title={props.meetupData.title}\r\n    url={props.meetupData.image}\r\n    address={props.meetup.address}\r\n    description={props.meetup.description}\r\n    />\r\n)\r\n}\r\n\r\nexport async function getStaticPaths(){\r\n    const client = await MongoClient.connect(\r\n        'mongodb+srv://deepak07:%40P3Gh%40W9bQYY5m4@cluster0.u6scy9x.mongodb.net/test'\r\n    )\r\n    const db = client.db()\r\n    const meetupsCollection = db.collection('meetups')\r\n    const meetups = await meetupsCollection.find({}, {_id:1}).toArray();\r\n    client.close();\r\n\r\n    return {\r\n        fallback: 'blocking',\r\n        paths: meetups.map((meetup)=>({\r\n           params: {meetupId: meetup._id.toString()},\r\n        }))\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context){\r\n    const meetupId= context.params.meetupId;\r\n    const client = await MongoClient.connect(\r\n        'mongodb+srv://deepak07:%40P3Gh%40W9bQYY5m4@cluster0.u6scy9x.mongodb.net/test'\r\n    )\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetups');\r\n\r\n    const selectedMeetup = await meetupsCollection.findOne({\r\n        _id: ObjectId(meetupId),\r\n    })\r\n\r\n\r\nclient.close();\r\n\r\nreturn{ \r\n    props:{\r\n        meetupData:{\r\n            id: selectedMeetup._id.toString(),\r\n            title: selectedMeetup.title,\r\n            address: selectedMeetup.address,\r\n            image: selectedMeetup.image,\r\n            description: selectedMeetup.description,\r\n        },\r\n    },\r\n};\r\n}\r\n\r\nexport default meetupDetails;\r\n\r\n"]},"metadata":{},"sourceType":"module"}